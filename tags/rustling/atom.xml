<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Cola Tech - Rustling</title>
    <subtitle>A blog about technology</subtitle>
    <link rel="self" type="application/atom+xml" href="https://benx-guo.github.io/cola-tech/tags/rustling/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://benx-guo.github.io/cola-tech/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-09-16T00:00:00+00:00</updated>
    <id>https://benx-guo.github.io/cola-tech/tags/rustling/atom.xml</id>
    <entry xml:lang="en">
        <title>[WIP]Day 2 rustlings 105&#x2F;110</title>
        <published>2025-09-16T00:00:00+00:00</published>
        <updated>2025-09-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://benx-guo.github.io/cola-tech/oscamp/oscamp-20250916/"/>
        <id>https://benx-guo.github.io/cola-tech/oscamp/oscamp-20250916/</id>
        
        <content type="html" xml:base="https://benx-guo.github.io/cola-tech/oscamp/oscamp-20250916/">&lt;div class=&quot;banner-container&quot; style=&quot;width: 100%; margin: 1em 0; text-align: center; position: relative;&quot;&gt;
  
  &lt;a href=&quot;https:&#x2F;&#x2F;opencamp.cn&#x2F;os2edu&#x2F;camp&#x2F;2025fall&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; style=&quot;text-decoration: none; display: block; cursor: pointer; outline: none;&quot;&gt;
  
    &lt;img src=&quot;https:&#x2F;&#x2F;benx-guo.github.io&#x2F;cola-tech&#x2F;oscamp_header.png&quot; alt=&quot;2025 秋冬季开源操作系统训练营 Day 2&quot; title=&quot;2025 秋冬季开源操作系统训练营 Day 2&quot;
         style=&quot;width: 100%; max-width: 100%; height: auto; display: block; margin: 0 auto; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.15); transition: transform 0.3s ease, box-shadow 0.3s ease;&quot;&gt;
    
    &lt;div class=&quot;banner-caption&quot; style=&quot;margin-top: 0.5em; text-align: center;&quot;&gt;
      &lt;span class=&quot;banner-text&quot;&gt;Day 2&lt;&#x2F;span&gt;
    &lt;&#x2F;div&gt;
    
  
  &lt;&#x2F;a&gt;
  
&lt;&#x2F;div&gt;

&lt;style&gt;
.banner-container {
  background: linear-gradient(135deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0.02) 100%);
  border-radius: 16px;
  padding: 1em;
  border: 1px solid rgba(255,255,255,0.1);
}

.banner-container img:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 30px rgba(0,0,0,0.2);
}

.banner-text {
  font-family: inherit;
  font-size: 0.9em;
  font-weight: 400;
  color: var(--text-color, #fff);
  text-align: center;
  display: inline-block;
  opacity: 0.8;
  letter-spacing: 0.5px;
}

&#x2F;* 移除链接的所有视觉效果 *&#x2F;
.banner-container a {
  outline: none !important;
  border: none !important;
  -webkit-tap-highlight-color: transparent;
  text-decoration: none !important;
  box-shadow: none !important;
}

&#x2F;* 移除外部链接图标 *&#x2F;
.banner-container a::after {
  content: none !important;
  display: none !important;
}

.banner-container a::before {
  content: none !important;
  display: none !important;
}

&#x2F;* 移除所有可能的图标和装饰 *&#x2F;
.banner-container a *::after {
  content: none !important;
  display: none !important;
}

.banner-container a *::before {
  content: none !important;
  display: none !important;
}

&#x2F;* 移除可能的背景图标 *&#x2F;
.banner-container a {
  background-image: none !important;
  background: none !important;
}

.banner-container a:focus {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.banner-container a:active {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.banner-container a:hover {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.banner-container a:visited {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

@media (max-width: 768px) {
  .banner-container {
    padding: 0.8em;
  }
  
  .banner-text {
    font-size: 0.85em !important;
  }
}
&lt;&#x2F;style&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[WIP]Day 3 rustlings 110&#x2F;110</title>
        <published>2025-09-16T00:00:00+00:00</published>
        <updated>2025-09-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://benx-guo.github.io/cola-tech/oscamp/oscamp-20250917/"/>
        <id>https://benx-guo.github.io/cola-tech/oscamp/oscamp-20250917/</id>
        
        <content type="html" xml:base="https://benx-guo.github.io/cola-tech/oscamp/oscamp-20250917/">&lt;div class=&quot;banner-container&quot; style=&quot;width: 100%; margin: 1em 0; text-align: center; position: relative;&quot;&gt;
  
  &lt;a href=&quot;https:&#x2F;&#x2F;opencamp.cn&#x2F;os2edu&#x2F;camp&#x2F;2025fall&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; style=&quot;text-decoration: none; display: block; cursor: pointer; outline: none;&quot;&gt;
  
    &lt;img src=&quot;https:&#x2F;&#x2F;benx-guo.github.io&#x2F;cola-tech&#x2F;oscamp_header.png&quot; alt=&quot;2025 秋冬季开源操作系统训练营 Day 3&quot; title=&quot;2025 秋冬季开源操作系统训练营 Day 3&quot;
         style=&quot;width: 100%; max-width: 100%; height: auto; display: block; margin: 0 auto; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.15); transition: transform 0.3s ease, box-shadow 0.3s ease;&quot;&gt;
    
    &lt;div class=&quot;banner-caption&quot; style=&quot;margin-top: 0.5em; text-align: center;&quot;&gt;
      &lt;span class=&quot;banner-text&quot;&gt;Day 3&lt;&#x2F;span&gt;
    &lt;&#x2F;div&gt;
    
  
  &lt;&#x2F;a&gt;
  
&lt;&#x2F;div&gt;

&lt;style&gt;
.banner-container {
  background: linear-gradient(135deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0.02) 100%);
  border-radius: 16px;
  padding: 1em;
  border: 1px solid rgba(255,255,255,0.1);
}

.banner-container img:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 30px rgba(0,0,0,0.2);
}

.banner-text {
  font-family: inherit;
  font-size: 0.9em;
  font-weight: 400;
  color: var(--text-color, #fff);
  text-align: center;
  display: inline-block;
  opacity: 0.8;
  letter-spacing: 0.5px;
}

&#x2F;* 移除链接的所有视觉效果 *&#x2F;
.banner-container a {
  outline: none !important;
  border: none !important;
  -webkit-tap-highlight-color: transparent;
  text-decoration: none !important;
  box-shadow: none !important;
}

&#x2F;* 移除外部链接图标 *&#x2F;
.banner-container a::after {
  content: none !important;
  display: none !important;
}

.banner-container a::before {
  content: none !important;
  display: none !important;
}

&#x2F;* 移除所有可能的图标和装饰 *&#x2F;
.banner-container a *::after {
  content: none !important;
  display: none !important;
}

.banner-container a *::before {
  content: none !important;
  display: none !important;
}

&#x2F;* 移除可能的背景图标 *&#x2F;
.banner-container a {
  background-image: none !important;
  background: none !important;
}

.banner-container a:focus {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.banner-container a:active {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.banner-container a:hover {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.banner-container a:visited {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

@media (max-width: 768px) {
  .banner-container {
    padding: 0.8em;
  }
  
  .banner-text {
    font-size: 0.85em !important;
  }
}
&lt;&#x2F;style&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Day 1 rustlings 100&#x2F;110</title>
        <published>2025-09-15T00:00:00+00:00</published>
        <updated>2025-09-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://benx-guo.github.io/cola-tech/oscamp/oscamp-20250915/"/>
        <id>https://benx-guo.github.io/cola-tech/oscamp/oscamp-20250915/</id>
        
        <content type="html" xml:base="https://benx-guo.github.io/cola-tech/oscamp/oscamp-20250915/">&lt;div class=&quot;banner-container&quot; style=&quot;width: 100%; margin: 1em 0; text-align: center; position: relative;&quot;&gt;
  
  &lt;a href=&quot;https:&#x2F;&#x2F;opencamp.cn&#x2F;os2edu&#x2F;camp&#x2F;2025fall&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; style=&quot;text-decoration: none; display: block; cursor: pointer; outline: none;&quot;&gt;
  
    &lt;img src=&quot;https:&#x2F;&#x2F;benx-guo.github.io&#x2F;cola-tech&#x2F;oscamp_header.png&quot; alt=&quot;2025 秋冬季开源操作系统训练营 Day 1&quot; title=&quot;2025 秋冬季开源操作系统训练营 Day 1&quot;
         style=&quot;width: 100%; max-width: 100%; height: auto; display: block; margin: 0 auto; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.15); transition: transform 0.3s ease, box-shadow 0.3s ease;&quot;&gt;
    
    &lt;div class=&quot;banner-caption&quot; style=&quot;margin-top: 0.5em; text-align: center;&quot;&gt;
      &lt;span class=&quot;banner-text&quot;&gt;Day 1&lt;&#x2F;span&gt;
    &lt;&#x2F;div&gt;
    
  
  &lt;&#x2F;a&gt;
  
&lt;&#x2F;div&gt;

&lt;style&gt;
.banner-container {
  background: linear-gradient(135deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0.02) 100%);
  border-radius: 16px;
  padding: 1em;
  border: 1px solid rgba(255,255,255,0.1);
}

.banner-container img:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 30px rgba(0,0,0,0.2);
}

.banner-text {
  font-family: inherit;
  font-size: 0.9em;
  font-weight: 400;
  color: var(--text-color, #fff);
  text-align: center;
  display: inline-block;
  opacity: 0.8;
  letter-spacing: 0.5px;
}

&#x2F;* 移除链接的所有视觉效果 *&#x2F;
.banner-container a {
  outline: none !important;
  border: none !important;
  -webkit-tap-highlight-color: transparent;
  text-decoration: none !important;
  box-shadow: none !important;
}

&#x2F;* 移除外部链接图标 *&#x2F;
.banner-container a::after {
  content: none !important;
  display: none !important;
}

.banner-container a::before {
  content: none !important;
  display: none !important;
}

&#x2F;* 移除所有可能的图标和装饰 *&#x2F;
.banner-container a *::after {
  content: none !important;
  display: none !important;
}

.banner-container a *::before {
  content: none !important;
  display: none !important;
}

&#x2F;* 移除可能的背景图标 *&#x2F;
.banner-container a {
  background-image: none !important;
  background: none !important;
}

.banner-container a:focus {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.banner-container a:active {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.banner-container a:hover {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.banner-container a:visited {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

@media (max-width: 768px) {
  .banner-container {
    padding: 0.8em;
  }
  
  .banner-text {
    font-size: 0.85em !important;
  }
}
&lt;&#x2F;style&gt;
&lt;h2 id=&quot;jin-ri-mu-biao&quot;&gt;今日目标&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
完成100项 rustlings 任务&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;xue-xi-zong-jie&quot;&gt;学习总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过今天的 rustlings 练习，深入理解了 Rust 的核心概念：内存管理、所有权系统和堆栈机制。这些基础概念是后续学习操作系统内核开发的重要基石。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhong-dian-nei-rong-hui-gu&quot;&gt;重点内容回顾&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;nei-cun-bu-ju&quot;&gt;内存布局&lt;&#x2F;h3&gt;
&lt;div class=&quot;concept-image-container&quot;&gt;
  &lt;img src=&quot;https:&#x2F;&#x2F;benx-guo.github.io&#x2F;cola-tech&#x2F;stack_heap.png&quot; alt=&quot;栈内存布局示意图&quot; title=&quot;栈内存布局示意图&quot; class=&quot;concept-image&quot;&gt;
  
  &lt;div class=&quot;concept-caption&quot;&gt;
    &lt;span class=&quot;concept-text&quot;&gt;图1：进程内存布局示意图 - 栈向下生长，堆向上生长&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
  
&lt;&#x2F;div&gt;

&lt;style&gt;
.concept-image-container {
  width: 100%;
  max-width: 100%;
  margin: 1.5em 0;
  margin-left: auto;
  margin-right: auto;
  text-align: center;
  position: relative;
}

.concept-image {
  width: 100%;
  max-width: 100%;
  height: auto;
  display: block;
  margin: 0 auto;
  object-fit: contain;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.concept-image:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.concept-caption {
  margin-top: 0.8em;
  text-align: center;
}

.concept-text {
  font-family: inherit;
  font-size: 0.9em;
  font-weight: 400;
  color: #ffffff;
  text-align: center;
  display: inline-block;
  opacity: 1;
  letter-spacing: 0.2px;
  background: rgba(0,0,0,0.7);
  padding: 0.4em 1em;
  border-radius: 15px;
  border: 1px solid rgba(255,255,255,0.3);
}

.concept-text::before {
  content: &quot;📊 &quot;;
  margin-right: 0.3em;
}

@media (max-width: 768px) {
  .concept-image {
    max-height: 60vh;
  }
  .concept-text {
    font-size: 0.85em;
    padding: 0.3em 0.8em;
  }
}

&#x2F;* 深色主题适配 *&#x2F;
@media (prefers-color-scheme: dark) {
  .concept-text {
    color: #ffffff;
    background: rgba(0,0,0,0.8);
    border-color: rgba(255,255,255,0.4);
  }
}
&lt;&#x2F;style&gt;
&lt;p&gt;典型进程内存布局：低地址处是代码段与只读数据，其后是已初始化&#x2F;未初始化数据段；中间为堆（向高地址增长）与映射区（mmap）；高地址处为栈（向低地址增长）。这种设计使堆与栈相向生长，便于按需扩展，最大化利用虚拟地址空间。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhan-stack&quot;&gt;栈（Stack）&lt;&#x2F;h3&gt;
&lt;div class=&quot;concept-image-container&quot;&gt;
  &lt;img src=&quot;https:&#x2F;&#x2F;benx-guo.github.io&#x2F;cola-tech&#x2F;method_stack.png&quot; alt=&quot;栈示意图&quot; title=&quot;栈示意图&quot; class=&quot;concept-image&quot;&gt;
  
  &lt;div class=&quot;concept-caption&quot;&gt;
    &lt;span class=&quot;concept-text&quot;&gt;图2：方法调用栈变化示意图&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
  
&lt;&#x2F;div&gt;

&lt;style&gt;
.concept-image-container {
  width: 100%;
  max-width: 100%;
  margin: 1.5em 0;
  margin-left: auto;
  margin-right: auto;
  text-align: center;
  position: relative;
}

.concept-image {
  width: 100%;
  max-width: 100%;
  height: auto;
  display: block;
  margin: 0 auto;
  object-fit: contain;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.concept-image:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.concept-caption {
  margin-top: 0.8em;
  text-align: center;
}

.concept-text {
  font-family: inherit;
  font-size: 0.9em;
  font-weight: 400;
  color: #ffffff;
  text-align: center;
  display: inline-block;
  opacity: 1;
  letter-spacing: 0.2px;
  background: rgba(0,0,0,0.7);
  padding: 0.4em 1em;
  border-radius: 15px;
  border: 1px solid rgba(255,255,255,0.3);
}

.concept-text::before {
  content: &quot;📊 &quot;;
  margin-right: 0.3em;
}

@media (max-width: 768px) {
  .concept-image {
    max-height: 60vh;
  }
  .concept-text {
    font-size: 0.85em;
    padding: 0.3em 0.8em;
  }
}

&#x2F;* 深色主题适配 *&#x2F;
@media (prefers-color-scheme: dark) {
  .concept-text {
    color: #ffffff;
    background: rgba(0,0,0,0.8);
    border-color: rgba(255,255,255,0.4);
  }
}
&lt;&#x2F;style&gt;
&lt;p&gt;栈遵循后进先出（LIFO）原则。函数调用时压入返回地址、参数和局部变量，栈指针随之向低地址移动；返回时栈帧整体弹出，指针复位，内存自动回收。适合编译期大小固定的数据，如基本类型、引用等。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; 局部变量 x 入栈
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; 局部变量 y 入栈
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; 函数结束时，x 和 y 自动出栈
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dui-heap&quot;&gt;堆（Heap）&lt;&#x2F;h3&gt;
&lt;div class=&quot;concept-image-container&quot;&gt;
  &lt;img src=&quot;https:&#x2F;&#x2F;benx-guo.github.io&#x2F;cola-tech&#x2F;heap.png&quot; alt=&quot;堆内存布局示意图&quot; title=&quot;堆内存布局示意图&quot; class=&quot;concept-image&quot;&gt;
  
  &lt;div class=&quot;concept-caption&quot;&gt;
    &lt;span class=&quot;concept-text&quot;&gt;图3：堆内存分配示意图&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
  
&lt;&#x2F;div&gt;

&lt;style&gt;
.concept-image-container {
  width: 100%;
  max-width: 100%;
  margin: 1.5em 0;
  margin-left: auto;
  margin-right: auto;
  text-align: center;
  position: relative;
}

.concept-image {
  width: 100%;
  max-width: 100%;
  height: auto;
  display: block;
  margin: 0 auto;
  object-fit: contain;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.concept-image:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.concept-caption {
  margin-top: 0.8em;
  text-align: center;
}

.concept-text {
  font-family: inherit;
  font-size: 0.9em;
  font-weight: 400;
  color: #ffffff;
  text-align: center;
  display: inline-block;
  opacity: 1;
  letter-spacing: 0.2px;
  background: rgba(0,0,0,0.7);
  padding: 0.4em 1em;
  border-radius: 15px;
  border: 1px solid rgba(255,255,255,0.3);
}

.concept-text::before {
  content: &quot;📊 &quot;;
  margin-right: 0.3em;
}

@media (max-width: 768px) {
  .concept-image {
    max-height: 60vh;
  }
  .concept-text {
    font-size: 0.85em;
    padding: 0.3em 0.8em;
  }
}

&#x2F;* 深色主题适配 *&#x2F;
@media (prefers-color-scheme: dark) {
  .concept-text {
    color: #ffffff;
    background: rgba(0,0,0,0.8);
    border-color: rgba(255,255,255,0.4);
  }
}
&lt;&#x2F;style&gt;
&lt;p&gt;堆用于运行期大小不确定或需跨栈帧存活的数据，如&lt;code&gt;String&lt;&#x2F;code&gt;、&lt;code&gt;Vec&lt;&#x2F;code&gt;。分配&#x2F;释放有开销，访问经指针间接完成；在Rust中，离开作用域由所有权自动释放，避免了内存泄漏。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;heap_example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;String::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; 在堆上分配内存
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt; world&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; String 的所有权在 s1 上，当 s1 离开作用域时自动释放堆内存
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rustsuo-you-quan-xi-tong&quot;&gt;Rust所有权系统&lt;&#x2F;h2&gt;
&lt;div class=&quot;concept-image-container&quot;&gt;
  &lt;img src=&quot;https:&#x2F;&#x2F;benx-guo.github.io&#x2F;cola-tech&#x2F;ownership.png&quot; alt=&quot;Rust所有权示意图&quot; title=&quot;Rust所有权示意图&quot; class=&quot;concept-image&quot;&gt;
  
  &lt;div class=&quot;concept-caption&quot;&gt;
    &lt;span class=&quot;concept-text&quot;&gt;图4：Rust所有权机制示意图&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
  
&lt;&#x2F;div&gt;

&lt;style&gt;
.concept-image-container {
  width: 100%;
  max-width: 100%;
  margin: 1.5em 0;
  margin-left: auto;
  margin-right: auto;
  text-align: center;
  position: relative;
}

.concept-image {
  width: 100%;
  max-width: 100%;
  height: auto;
  display: block;
  margin: 0 auto;
  object-fit: contain;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.concept-image:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.concept-caption {
  margin-top: 0.8em;
  text-align: center;
}

.concept-text {
  font-family: inherit;
  font-size: 0.9em;
  font-weight: 400;
  color: #ffffff;
  text-align: center;
  display: inline-block;
  opacity: 1;
  letter-spacing: 0.2px;
  background: rgba(0,0,0,0.7);
  padding: 0.4em 1em;
  border-radius: 15px;
  border: 1px solid rgba(255,255,255,0.3);
}

.concept-text::before {
  content: &quot;📊 &quot;;
  margin-right: 0.3em;
}

@media (max-width: 768px) {
  .concept-image {
    max-height: 60vh;
  }
  .concept-text {
    font-size: 0.85em;
    padding: 0.3em 0.8em;
  }
}

&#x2F;* 深色主题适配 *&#x2F;
@media (prefers-color-scheme: dark) {
  .concept-text {
    color: #ffffff;
    background: rgba(0,0,0,0.8);
    border-color: rgba(255,255,255,0.4);
  }
}
&lt;&#x2F;style&gt;
&lt;p&gt;所有权是Rust内存安全的核心机制，确保无需垃圾回收也能安全管理内存：每个值有且只有一个所有者，离开作用域自动释放；配套机制包括移动、拷贝与借用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; 移动（move）：所有权转移
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;String::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;hi&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; s2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; s1;              &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; s1 被移动，之后不能再用 s1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;{}&amp;quot;, s1);   &#x2F;&#x2F; 编译错误
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; 拷贝（copy）：栈上小型标量类型实现 Copy，可按位拷贝
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; a;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; a 仍然可用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; 借用（&amp;amp;T）：只读访问，不获取所有权
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;len_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;s2);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; 可变借用（&amp;amp;mut T）：独占可写，作用域内不能同时存在其他借用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; s3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;String::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;push_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; s3);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; 获取所有权
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;takes_ownership&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(s2);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; s2 被移动，之后不可用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;{}&amp;quot;, s2); &#x2F;&#x2F; 编译错误：s2 已被移动
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;len_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;String) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;push_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; String) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;!&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;takes_ownership&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: String) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Took ownership of: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, s);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;p&gt;今天把栈与堆的区别、进程内存布局，以及所有权&#x2F;借用的基本回顾一下。&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
